// =================================================================
// =================================================================

// services/ability_score_service.dart (UPDATED)
// 경로: lib/services/ability_score_service.dart
import '../models/user_profile_data.dart';
import '../models/detailed_survey_data.dart'; // [추가]

class AbilityScoreService {

  static const Map<int, double> _assetScoreTable = {
    0: 0.0, 2674134: 0.4, 5348268: 0.45, 8022402: 0.5, 10696536: 0.55, 13370670: 0.6,
    16044804: 0.65, 18718938: 0.7, 21393072: 0.75, 24067206: 0.8, 26741340: 0.85,
    28078407: 0.9, 29415474: 0.95, 30752541: 1.0, 32089608: 1.05, 33426675: 1.1,
    34763742: 1.15, 36100809: 1.2, 37437876: 1.25, 38774943: 1.3, 40112010: 1.35,
    41449077: 1.4, 42786144: 1.45, 44123211: 1.5, 45460278: 1.55, 46797345: 1.6,
    48134412: 1.65, 49471479: 1.7, 50808546: 1.75, 52145613: 1.8, 53482680: 1.85,
    54819747: 1.9, 56156814: 1.95, 57493881: 2.0, 58830948: 2.05, 60168015: 2.1,
    61505082: 2.15, 62842149: 2.2, 64179216: 2.25, 65516283: 2.3, 66853350: 2.35,
    69527484: 2.4, 72201618: 2.45, 74875752: 2.5, 77549886: 2.55, 80224020: 2.6,
    82898154: 2.65, 85572288: 2.7, 88246422: 2.75, 90920556: 2.8, 93594690: 2.85,
    96268824: 2.9, 98942958: 2.95, 100000000: 3.0, 104291226: 3.03, 106965360: 3.06,
    // ... (이하 모든 자산 점수표 데이터)
    1000000000: 10.0,
  };

  static const Map<int, double> _incomeScoreTable = {
    0: 0.0, 2674134: 0.5, 5348268: 1.0, 8022402: 1.5, 10696536: 2.0, 13370670: 2.5,
    16044804: 3.0, 18718938: 3.5, 21393072: 4.0, 24067206: 4.5, 26741340: 5.0,
    28078407: 5.1, 29415474: 5.2, 30752541: 5.3, 32089608: 5.4, 33426675: 5.5,
    34763742: 5.6, 36100809: 5.7, 37437876: 5.8, 38774943: 5.9, 40112010: 6.0,
    41449077: 6.1, 42786144: 6.2, 44123211: 6.3, 45460278: 6.4, 46797345: 6.5,
    48134412: 6.6, 49471479: 6.7, 50808546: 6.8, 52145613: 6.9, 53482680: 7.0,
    54819747: 7.1, 56156814: 7.2, 57493881: 7.3, 58830948: 7.4, 60168015: 7.5,
    61505082: 7.6, 62842149: 7.7, 64179216: 7.8, 65516283: 7.9, 66853350: 8.0,
    69527484: 8.1, 72201618: 8.2, 74875752: 8.3, 77549886: 8.4, 80224020: 8.5,
    82898154: 8.6, 85572288: 8.7, 88246422: 8.8, 90920556: 8.9, 93594690: 9.0,
    96268824: 9.01, 98942958: 9.02, 101617092: 9.03, 104291226: 9.04, 106965360: 9.05,
    109639494: 9.06, 112313628: 9.07, 114987762: 9.08, 117661896: 9.09, 120336030: 9.10,
    123010164: 9.11, 125684298: 9.12, 128358432: 9.13, 131032566: 9.14, 133706700: 9.15,
    136380834: 9.16, 139054968: 9.17, 141729102: 9.18, 144403236: 9.19, 147077370: 9.20,
    149751504: 9.21, 152425638: 9.22, 155099772: 9.23, 157773906: 9.24, 160448040: 9.25,
    163122174: 9.26, 165796308: 9.27, 168470442: 9.28, 171144576: 9.29, 173818710: 9.30,
    176492844: 9.31, 179166978: 9.32, 181841112: 9.33, 184515246: 9.34, 187189380: 9.35,
    189863514: 9.36, 192537648: 9.37, 195211782: 9.38, 197885916: 9.39, 200560050: 9.40,
    203234184: 9.41, 205908318: 9.42, 208582452: 9.43, 211256586: 9.44, 213930720: 9.45,
    216604854: 9.46, 219278988: 9.47, 221953122: 9.48, 224627256: 9.49, 227301390: 9.50,
    240672060: 9.51, 254042730: 9.52, 267413400: 9.53, 280784070: 9.54, 294154740: 9.55,
    307525410: 9.56, 320896080: 9.57, 334266750: 9.58, 347637420: 9.59, 361008090: 9.60,
    374378760: 9.61, 387749430: 9.62, 401120100: 9.63, 414490770: 9.64, 427861440: 9.65,
    441232110: 9.66, 454602780: 9.67, 467973450: 9.68, 481344120: 9.69, 494714790: 9.70,
    513433728: 9.71, 532152666: 9.72, 550871604: 9.73, 569590542: 9.74, 588309480: 9.75,
    607028418: 9.76, 625747356: 9.77, 644466294: 9.78, 663185232: 9.79, 681904170: 9.80,
    700623108: 9.81, 719342046: 9.82, 738060984: 9.83, 756779922: 9.84, 775498860: 9.85,
    794217798: 9.86, 812936736: 9.87, 831655674: 9.88, 850374612: 9.89, 869093550: 9.90,
    887812488: 9.91, 906531426: 9.92, 925250364: 9.93, 943969302: 9.94, 962688240: 9.95,
    981407178: 9.96, 1000126116: 9.97, 1018845054: 9.98, 1037563992: 9.99,
  };

  double _getScoreFromTable(int? valueInManwon, Map<int, double> table) {
    if (valueInManwon == null) return 0.0;
    int valueInWon = valueInManwon * 10000;

    int maxKey = table.keys.reduce((a, b) => a > b ? a : b);
    if (valueInWon > maxKey) return table[maxKey]!;
    if (valueInWon <= 0) return 0.0;

    final sortedKeys = table.keys.toList()..sort();
    for (var maxVal in sortedKeys) {
      if (valueInWon <= maxVal) {
        return table[maxVal]!;
      }
    }
    return table[maxKey]!; // Should not be reached
  }

  // --- [추가] 가치관 '고정' 점수만 계산하는 함수 ---
  int calculateFixedValuesScore(UserProfileData data) {
    int totalFixedScore = 0;
    final fixedScoreQuestions = DetailedSurveyRepository.allQuestions
        .where((q) => q.type == QuestionType.fixed);

    for (var question in fixedScoreQuestions) {
      int? selectedAnswerIndex = data.surveyAnswers[question.id];
      if (selectedAnswerIndex != null) {
        totalFixedScore += question.answers[selectedAnswerIndex].fixedScore ?? 0;
      }
    }
    return totalFixedScore;
  }

  Map<String, double> calculateScores(UserProfileData data) {
    final Map<String, double> scores = {
      '학력': 0, '연소득': 0, '자산': 0, '가치관': 0, '부모님': 0
    };

    // 1. 학력 점수 (수정된 기준 반영, 100점 만점으로 환산)
    switch (data.educationLevel) {
      case '고등학교': scores['학력'] = 2.5 * 10; break;
      case '전문대학': scores['학력'] = 3.0 * 10; break;
      case '지방 4년제': scores['학력'] = 3.5 * 10; break;
      case '수도권 4년제': scores['학력'] = 4.0 * 10; break;
      case '지방 국립대 2년제': scores['학력'] = 3.25 * 10; break;
      case '지방 국립대 4년제': scores['학력'] = 5.0 * 10; break;
      case '인서울 4년제': scores['학력'] = 6.0 * 10; break;
      case '인서울 상위 4년제': scores['학력'] = 7.0 * 10; break;
      case '대학원 석사': scores['학력'] = 7.5 * 10; break;
      case '대학원 박사': scores['학력'] = 8.5 * 10; break;
      case '해외 유학 (미국/영국/프랑스)': scores['학력'] = 8.0 * 10; break;
      case '해외 유학 (호주/캐나다/중국/일본)': scores['학력'] = 7.75 * 10; break;
      case '해외 유학 (그 외 국가)': scores['학력'] = 7.5 * 10; break;
      case '해외 대학원 석사 (미국/영국/프랑스)': scores['학력'] = 8.25 * 10; break;
      case '해외 대학원 석사 (호주/캐나다/중국/일본)': scores['학력'] = 8.0 * 10; break;
      case '해외 대학원 석사 (그 외 국가)': scores['학력'] = 7.75 * 10; break;
      case '해외 대학원 박사 (미국/영국/프랑스)': scores['학력'] = 9.25 * 10; break;
      case '해외 대학원 박사 (호주/캐나다/중국/일본)': scores['학력'] = 9.0 * 10; break;
      case '해외 대학원 박사 (그 외 국가)': scores['학력'] = 8.75 * 10; break;
      case '의대/치대/한의대/로스쿨': scores['학력'] = 9.5 * 10; break;
      case '기타': scores['학력'] = 2.5 * 10; break;
      default: scores['학력'] = 0;
    }

    // 연소득 점수 (100점 만점 환산)
    scores['연소득'] = _getScoreFromTable(data.annualIncome, AbilityScoreService._incomeScoreTable) * 10;

    // 자산 점수 (100점 만점 환산)
    scores['자산'] = _getScoreFromTable(data.totalAssets, AbilityScoreService._assetScoreTable) * 10;

    // 4. 가치관 점수
    final valuesScore = data.myFixedValuesScore;
    scores['가치관'] = (valuesScore / 130) * 100;
    if (scores['가치관']! > 100) scores['가치관'] = 100;

    // 5. 부모님 점수
    double parentScore = 0;
    if((data.parentsAnnualIncome ?? 0) > 0) parentScore += 25;
    if((data.parentsTotalAssets ?? 0) > 0) parentScore += 25;
    if(data.parentsRealEstateValue != null && data.parentsRealEstateValue != '미보유') parentScore += 25;
    if(data.parentsCarValue != null && data.parentsCarValue != '미보유') parentScore += 25;
    scores['부모님'] = parentScore;

    return scores;
  }
}